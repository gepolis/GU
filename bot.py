import asyncio
import aiohttp
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from aiogram.types import ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
#bot = Bot(token="7483718419:AAHlF2ihnQ-l6nLtn94oT3mNAaG_IqGoST4")
bot = Bot(token="7707847470:AAGJmprISRa2Q_eTYTDMNZyNwmcy0uAeP8c")
dp = Dispatcher()
ADMINS = [2015460473, 8068306751]  # –í–∞—à–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CHANNEL_ID = -1002444630943  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
SUPPORT_USERNAME = "@GU_AppSupport"  # –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
AUTH_URL = "https://gosuslugi.com.ru/gen_auth"
USERS_API_URL = "https://gosuslugi.com.ru/admin/json/users"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI = {
    "lock": "üîê",
    "key": "üîë",
    "tools": "üõ†",
    "feedback": "üìù",
    "users": "üë•",
    "broadcast": "üì¢",
    "success": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "fire": "üî•",
    "refresh": "üîÑ",
    "star": "‚≠ê",
    "mail": "‚úâÔ∏è",
    "chart": "üìä",
    "clock": "‚è≥",
    "search": "üîç",
    "star": "üåü"
}

import aiohttp

API_BASE = "http://127.0.0.1:5000"  # –ø–æ–º–µ–Ω—è–π –Ω–∞ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å


async def get_user_tasks(user_id: int):
    url = f"{API_BASE}/api/tasks/{user_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status != 200:
                return []
            data = await resp.json()
            # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ
            # [{"id":1, "description":"...", "url_id":-10012345}, ...]
            print(data)
            return data
from aiogram.utils.keyboard import InlineKeyboardBuilder

@dp.message(Command("tasks"))
async def show_tasks(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_user_tasks(user_id)
    if not tasks:
        await message.answer("–ó–∞–¥–∞–Ω–∏–π –¥–ª—è –≤–∞—Å –Ω–µ—Ç.")
        return

    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.add(
            types.InlineKeyboardButton(
                text=task.get("description", "–ó–∞–¥–∞–Ω–∏–µ"),
                callback_data=f"show_task:{task['id']}"
            )
        )
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.as_markup())
@dp.callback_query(lambda c: c.data and c.data.startswith("show_task:"))
async def show_task_detail(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    task_id = int(callback.data.split(":")[1])

    tasks = await get_user_tasks(user_id)
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    text = (
        f"‚ú® <b>{task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')}</b>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{task.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        f"üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> <b>{task.get('reward', 0)}</b> —Å–∫—Ä—ã—Ç–∏–π"
    )


    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏",
            url=task.get("url")
        )
    )
    kb.row(types.InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
        callback_data=f"check_task:{task['id']}"
    ))
    kb.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_tasks"
        )
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("check_task:"))
async def check_task_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    task_id = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ
    tasks = await get_user_tasks(user_id)
    task = next((t for t in tasks if t["id"] == task_id), None)
    if not task:
        await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å url_id
    url_id = task.get("url_id")
    try:
        member = await bot.get_chat_member(url_id, user_id)
        if member.status not in ["member", "administrator", "creator"]:
            await callback.answer("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
            return
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
    async with aiohttp.ClientSession() as session:
        try:
            complete_url = f"{API_BASE}/api/tasks/complete"
            resp = await session.post(complete_url, json={"user_id": user_id, "task_id": task_id})
            if resp.status == 200:
                data = await resp.json()
                if data.get("status") == "success":
                    await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞—à –ø—Ä–∏–∑ —É–∂–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ", show_alert=True)
                else:
                    await callback.answer(f"–û—à–∏–±–∫–∞ API: {data.get('message', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}", show_alert=True)
            else:
                await callback.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {resp.status}", show_alert=True)
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}", show_alert=True)
@dp.callback_query(lambda c: c.data == "back_to_tasks")
async def back_to_tasks_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tasks = await get_user_tasks(user_id)
    if not tasks:
        await callback.message.edit_text("<b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –°–∫—Ä—ã—Ç–∏—è!</b> \n\n<i>–°–µ–π—á–∞—Å –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç ‚Äî –∑–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.</i>", reply_markup=None, parse_mode="HTML")
        await callback.answer()
        return

    kb = InlineKeyboardBuilder()
    for task in tasks:
        kb.add(
            types.InlineKeyboardButton(
                text=task.get("description", "–ó–∞–¥–∞–Ω–∏–µ"),
                callback_data=f"show_task:{task['id']}"
            )
        )
    await callback.message.edit_text("<b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –°–∫—Ä—ã—Ç–∏—è! </b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.as_markup(), parse_mode="HTML")
    await callback.answer()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    confirm_sending = State()


class FeedbackStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()


async def notify_admins(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                message,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Failed to send admin notification to {admin_id}: {str(e)}")


async def gen_auth_url(user_id: int, username: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    url = f"{AUTH_URL}/{user_id}/{username}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    error_message = (
                        f"{EMOJI['fire']} <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞</b>\n\n"
                        f"<b>‚Ä¢ User ID:</b> <code>{user_id}</code>\n"
                        f"<b>‚Ä¢ Username:</b> @{username or '–Ω–µ—Ç'}\n"
                        f"<b>‚Ä¢ Status:</b> {resp.status}\n"
                        f"<b>‚Ä¢ Error:</b> <code>{error_text[:200]}</code>\n"
                        f"<b>‚Ä¢ URL:</b> <code>{url}</code>"
                    )
                    await notify_admins(error_message)
                    return None

                data = await resp.json()
                code = data.get('code')
                if code:
                    success_message = (
                        f"{EMOJI['success']} <b>–ù–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                        f"<b>‚Ä¢ User ID:</b> <code>{user_id}</code>\n"
                        f"<b>‚Ä¢ Username:</b> @{username or '–Ω–µ—Ç'}\n"
                        f"<b>‚Ä¢ –ö–æ–¥:</b> <code>{code}</code>\n"
                        f"<b>‚Ä¢ –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
                    )
                    await notify_admins(success_message)
                return code
    except Exception as e:
        error_message = (
            f"{EMOJI['fire']} <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"<b>‚Ä¢ User ID:</b> <code>{user_id}</code>\n"
            f"<b>‚Ä¢ Username:</b> @{username or '–Ω–µ—Ç'}\n"
            f"<b>‚Ä¢ –û—à–∏–±–∫–∞:</b> <code>{str(e)}</code>\n"
            f"<b>‚Ä¢ –¢–∏–ø:</b> {type(e).__name__}"
        )
        await notify_admins(error_message)
        return None


def create_main_menu(user_id: int) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.row(
        types.InlineKeyboardButton(
            text=f"{EMOJI['key']} –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥",
            callback_data="get_code"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=f"{EMOJI['tools']} –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            url=f"https://t.me/{SUPPORT_USERNAME[1:]}"
        ),
        types.InlineKeyboardButton(
            text=f"{EMOJI['feedback']} –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞",
            callback_data="leave_feedback"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text=f"{EMOJI['star']} –ó–∞–¥–∞–Ω–∏—è",
            callback_data="back_to_tasks"
        )
    )

    # –ê–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏
    if user_id in ADMINS:
        builder.row(
            types.InlineKeyboardButton(
                text=f"{EMOJI['users']} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
                callback_data="check_all_subs"
            ),
            types.InlineKeyboardButton(
                text=f"{EMOJI['broadcast']} –†–∞—Å—Å—ã–ª–∫–∞",
                callback_data="start_broadcast"
            )
        )

    return builder.as_markup()


async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False


async def get_all_users() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(USERS_API_URL, timeout=30) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error(f"API error {resp.status}: {error_text[:200]}")
                    return []

                if 'application/json' not in resp.headers.get('Content-Type', ''):
                    error_text = await resp.text()
                    logger.error(f"Invalid content type: {error_text[:200]}")
                    return []

                users = await resp.json()
                if not isinstance(users, list):
                    logger.error(f"Invalid data format: {type(users)}")
                    return []

                return users
    except Exception as e:
        logger.error(f"Failed to get users: {str(e)}")
        return []


@dp.message(Command("start", "menu"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    user = message.from_user

    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"{EMOJI['lock']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        "–Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–∏—Å—Ç–µ–º–µ. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        f"<i>–í–∞–∂–Ω–æ: –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º "
        "—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ–º –∏–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º.</i>"
    )


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user.id):
        await message.answer(
            f"{EMOJI['warning']} <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text=f"{EMOJI['success']} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url="https://t.me/+d12Zmm2AvFhiMzAy"
                    )
                ]]
            )
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –º–µ–Ω—é
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=create_main_menu(user.id)
    )


@dp.callback_query(lambda c: c.data == "get_code")
async def process_get_code(callback: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    user = callback.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user.id):
        await callback.answer(
            f"{EMOJI['error']} –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª",
            show_alert=True
        )
        return

    await callback.answer(f"{EMOJI['clock']} –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥...")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    request_info = (
        f"{EMOJI['refresh']} <b>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞</b>\n\n"
        f"<b>‚Ä¢ User ID:</b> <code>{user.id}</code>\n"
        f"<b>‚Ä¢ Username:</b> @{user.username or '–Ω–µ—Ç'}\n"
        f"<b>‚Ä¢ –ò–º—è:</b> {user.full_name}\n"
        f"<b>‚Ä¢ –í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}"
    )
    await notify_admins(request_info)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
    code = await gen_auth_url(user.id, user.username or str("None"))
    if not code:
        await callback.message.answer(
            f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        return

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
    await callback.message.answer(
        f"{EMOJI['key']} <b>–í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n\n"
        f"<code>{code}</code>\n\n"
        f"{EMOJI['warning']} <i>–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!</i>",
        parse_mode="HTML"
    )


@dp.callback_query(lambda c: c.data == "check_all_subs")
async def check_all_subscriptions(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    if callback.from_user.id not in ADMINS:
        return

    await callback.answer(f"{EMOJI['clock']} –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...")

    users = await get_all_users()
    if not users:
        await callback.message.answer(
            f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )
        return

    total = len(users)
    subscribed = 0
    not_subscribed = 0
    errors = 0

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    progress_msg = await callback.message.answer(
        f"{EMOJI['search']} <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total}\n"
        "–ü—Ä–æ–≥—Ä–µ—Å—Å: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%\n"
        f"{EMOJI['success']} –ü–æ–¥–ø–∏—Å–∞–Ω—ã: 0\n"
        f"{EMOJI['error']} –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: 0\n"
        f"{EMOJI['warning']} –û—à–∏–±–∫–∏: 0",
        parse_mode="HTML"
    )

    # –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    for i, user in enumerate(users, 1):
        try:
            user_id = user.get('user_id')
            if not user_id:
                continue

            is_subscribed = await check_subscription(user_id)
            if is_subscribed:
                subscribed += 1
            else:
                not_subscribed += 1
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        if i % 10 == 0 or i == total:
            progress = int(i / total * 100)
            bars = '‚ñà' * (progress // 10)
            spaces = '‚ñë' * (10 - len(bars))

            await progress_msg.edit_text(
                f"{EMOJI['search']} <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bars}{spaces}] {progress}%\n"
                f"{EMOJI['success']} –ü–æ–¥–ø–∏—Å–∞–Ω—ã: {subscribed}\n"
                f"{EMOJI['error']} –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: {not_subscribed}\n"
                f"{EMOJI['warning']} –û—à–∏–±–∫–∏: {errors}",
                parse_mode="HTML"
            )

    # –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    result_message = (
        f"{EMOJI['chart']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
        f"<b>‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total}\n"
        f"<b>‚Ä¢ {EMOJI['success']} –ü–æ–¥–ø–∏—Å–∞–Ω—ã:</b> {subscribed}\n"
        f"<b>‚Ä¢ {EMOJI['error']} –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã:</b> {not_subscribed}\n"
        f"<b>‚Ä¢ {EMOJI['warning']} –û—à–∏–±–∫–∏:</b> {errors}\n\n"
        f"<b>–û—Ö–≤–∞—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b> {round(subscribed / total * 100 if total > 0 else 0, 1)}%"
    )

    await progress_msg.edit_text(result_message, parse_mode="HTML")


# ========== –ö–†–ê–°–ò–í–ê–Ø –°–ò–°–¢–ï–ú–ê FEEDBACK ==========

@dp.callback_query(lambda c: c.data == "leave_feedback")
async def start_feedback(callback: types.CallbackQuery, state: FSMContext):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤"""
    await callback.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    rating_kb = ReplyKeyboardBuilder()
    for i in range(1, 6):
        rating_kb.add(types.KeyboardButton(text=f"{i}"))

    await callback.message.answer(
        f"{EMOJI['feedback']} <b>–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:\n"
        "1 - –ü–ª–æ—Ö–æ, 5 - –û—Ç–ª–∏—á–Ω–æ",
        parse_mode="HTML",
        reply_markup=rating_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(FeedbackStates.waiting_for_rating)


@dp.message(FeedbackStates.waiting_for_rating)
async def process_rating(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    if not message.text or not message.text[0].isdigit() or int(message.text[0]) not in range(1, 6):
        await message.answer(
            f"{EMOJI['error']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    rating = int(message.text[0])
    await state.update_data(rating=rating)

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
    skip_kb = InlineKeyboardBuilder()
    skip_kb.add(types.InlineKeyboardButton(
        text=f"{EMOJI['success']} –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        callback_data="skip_comment"
    ))

    await message.answer(
        f"{EMOJI['mail']} <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await message.answer(
        "–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
        reply_markup=skip_kb.as_markup()
    )
    await state.set_state(FeedbackStates.waiting_for_comment)


@dp.callback_query(FeedbackStates.waiting_for_comment, lambda c: c.data == "skip_comment")
async def skip_comment(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–æ–≤"""
    data = await state.get_data()
    rating = data.get('rating', '?')
    user = callback.from_user

    feedback_msg = (
        f"{EMOJI['star']} <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
        f"<b>‚Ä¢ –û—Ü–µ–Ω–∫–∞:</b> {'‚≠ê' * int(rating)} ({rating}/5)\n"
        f"<b>‚Ä¢ User ID:</b> <code>{user.id}</code>\n"
        f"<b>‚Ä¢ Username:</b> @{user.username or '–Ω–µ—Ç'}\n"
        f"<b>‚Ä¢ –ò–º—è:</b> {user.full_name}\n"
        f"<b>‚Ä¢ –í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"<b>‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>"
    )

    await notify_admins(feedback_msg)
    await callback.message.edit_text(
        f"{EMOJI['success']} <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</b>\n\n"
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å!",
        parse_mode="HTML"
    )
    await state.clear()


@dp.message(FeedbackStates.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    data = await state.get_data()
    rating = data.get('rating', '?')
    user = message.from_user

    feedback_msg = (
        f"{EMOJI['star']} <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
        f"<b>‚Ä¢ –û—Ü–µ–Ω–∫–∞:</b> {'‚≠ê' * int(rating)} ({rating}/5)\n"
        f"<b>‚Ä¢ User ID:</b> <code>{user.id}</code>\n"
        f"<b>‚Ä¢ Username:</b> @{user.username or '–Ω–µ—Ç'}\n"
        f"<b>‚Ä¢ –ò–º—è:</b> {user.full_name}\n"
        f"<b>‚Ä¢ –í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"<b>‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{message.text}</i>"
    )

    await notify_admins(feedback_msg)
    await message.answer(
        f"{EMOJI['success']} <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.",
        parse_mode="HTML"
    )
    await state.clear()


# ========== –ö–†–ê–°–ò–í–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò ==========

@dp.callback_query(lambda c: c.data == "start_broadcast")
async def start_broadcast_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in ADMINS:
        return

    await callback.message.answer(
        f"{EMOJI['broadcast']} <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:\n"
        "(—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_message)
    await callback.answer()


@dp.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º"""
    await state.update_data(broadcast_message=message)

    preview_text = f"{EMOJI['mail']} <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
    if message.text:
        preview_text += message.text
    elif message.caption:
        preview_text += message.caption
    else:
        preview_text += "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"

    # –ö—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(
            text=f"{EMOJI['success']} –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
            callback_data="confirm_broadcast"
        ),
        types.InlineKeyboardButton(
            text=f"{EMOJI['error']} –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="cancel_broadcast"
        )
    )

    if message.text:
        await message.answer(
            preview_text,
            parse_mode="HTML",
            reply_markup=kb.as_markup()
        )
    else:
        if message.photo:
            await message.answer_photo(
                message.photo[-1].file_id,
                caption=preview_text,
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
        elif message.video:
            await message.answer_video(
                message.video.file_id,
                caption=preview_text,
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
        elif message.document:
            await message.answer_document(
                message.document.file_id,
                caption=preview_text,
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )

    await state.set_state(BroadcastStates.confirm_sending)


@dp.callback_query(BroadcastStates.confirm_sending, lambda c: c.data == "confirm_broadcast")
async def confirm_broadcast_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö—Ä–∞—Å–∏–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    data = await state.get_data()
    message = data['broadcast_message']
    await callback.answer(f"{EMOJI['clock']} –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

    users = await get_all_users()
    if not users:
        await callback.message.answer(
            f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )
        await state.clear()
        return

    user_ids = [u.get('user_id') for u in users if u.get('user_id')]
    total = len(user_ids)
    success = 0
    failed = 0

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await callback.message.answer(
        f"{EMOJI['broadcast']} <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total}\n"
        "–ü—Ä–æ–≥—Ä–µ—Å—Å: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%\n"
        f"{EMOJI['success']} –£—Å–ø–µ—à–Ω–æ: 0\n"
        f"{EMOJI['error']} –û—à–∏–±–æ–∫: 0",
        parse_mode="HTML"
    )

    # –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    for i, user_id in enumerate(user_ids, 1):
        try:
            if message.text:
                await bot.send_message(user_id, message.text, parse_mode="HTML")
            elif message.photo:
                await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
            elif message.video:
                await bot.send_video(user_id, message.video.file_id, caption=message.caption)
            elif message.document:
                await bot.send_document(user_id, message.document.file_id, caption=message.caption)
            success += 1
        except Exception as e:
            logger.error(f"Broadcast failed for {user_id}: {str(e)}")
            failed += 1

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        if i % 10 == 0 or i == total:
            progress = int(i / total * 100)
            bars = '‚ñà' * (progress // 10)
            spaces = '‚ñë' * (10 - len(bars))

            await progress_msg.edit_text(
                f"{EMOJI['broadcast']} <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
                f"<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bars}{spaces}] {progress}%\n"
                f"{EMOJI['success']} –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"{EMOJI['error']} –û—à–∏–±–æ–∫: {failed}",
                parse_mode="HTML"
            )

    # –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    result_message = (
        f"{EMOJI['success']} <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"<b>‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total}\n"
        f"<b>‚Ä¢ {EMOJI['success']} –£—Å–ø–µ—à–Ω–æ:</b> {success}\n"
        f"<b>‚Ä¢ {EMOJI['error']} –û—à–∏–±–æ–∫:</b> {failed}\n\n"
        f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {round(success / total * 100, 1)}%"
    )

    await progress_msg.edit_text(result_message, parse_mode="HTML")
    await state.clear()


@dp.callback_query(BroadcastStates.confirm_sending, lambda c: c.data == "cancel_broadcast")
async def cancel_broadcast_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö—Ä–∞—Å–∏–≤–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer(f"{EMOJI['error']} –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.edit_text(
        f"{EMOJI['error']} <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    await state.clear()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())